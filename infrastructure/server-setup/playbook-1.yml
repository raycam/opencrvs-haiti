# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
---
- hosts: localhost
  tasks:
    - name: Create MongoDB replicate key file locally
      local_action: shell openssl rand -base64 755 > /tmp/mongodb-keyfile
- hosts: all
  become: yes
  become_method: sudo
  tasks:
    - name: 'Create app directory'
      file:
        path: /opt/opencrvs
        state: directory

    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - mongodb_admin_username is defined
          - mongodb_admin_password is defined
          - elasticsearch_superuser_password is defined
          - disk_encryption_key is defined
          - encrypted_disk_size is defined

    - name: Setting global variables accessed by country configuration playbook
      ansible.builtin.set_fact:
        mongodb_admin_password={{ mongodb_admin_password }}
        mongodb_admin_username={{ mongodb_admin_username }}
        elasticsearch_superuser_password={{elasticsearch_superuser_password}}
        disk_encryption_key={{ disk_encryption_key }}

    - name: 'Add docker repository key'
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: 'Add docker repository'
      apt_repository:
        repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable'
        state: present
        update_cache: yes

    - name: 'Install docker'
      apt: name=docker-ce state=present update_cache=yes install_recommends=yes allow_unauthenticated=yes
      when: ansible_distribution == "Ubuntu"
      retries: 3
      delay: 20

    - name: 'Ensure Docker service started'
      service: name=docker state=started

    - name: 'Get docker info'
      shell: docker info
      register: docker_info
      changed_when: False

    - name: 'Install pip3'
      apt:
        name: python3-pip
        state: present

    - name: 'Install jq'
      apt:
        name: jq
        state: present

    - name: 'Install pexpect python module for ansible expect commands'
      pip:
        name: pexpect

    - name: 'Install docker python module for ansible docker commands'
      pip:
        name: docker

    - name: 'Log into DockerHub'
      docker_login:
        username: '{{dockerhub_username}}'
        password: '{{dockerhub_password}}'

    - name: 'Setup crontab to clean up docker images'
      cron:
        name: 'cleanup docker images'
        minute: '0'
        hour: '0'
        job: '/usr/bin/docker system prune -af >> /var/log/docker-prune.log'

    - name: 'Setup crontab to backup the opencrvs data'
      cron:
        name: 'backup opencrvs'
        minute: '0'
        hour: '0'
        job: 'cd / && bash /opt/opencrvs/infrastructure/emergency-backup-metadata.sh --ssh_user={{ external_backup_server_user }} --ssh_host={{ external_backup_server_ip }} --ssh_port={{ external_backup_server_ssh_port }} --production_ip={{ manager_production_server_ip }} --remote_dir={{ external_backup_server_remote_directory }} --replicas=1 >> /var/log/opencrvs-backup.log 2>&1'
      when: external_backup_server_ip is defined

    - name: Copy MongoDB replication security key file to nodes
      copy: src=/tmp/mongodb-keyfile dest=/mongodb-keyfile mode=0400 force=no

    - name: Change access right of key file
      file:
        path: /mongodb-keyfile
        state: file
        owner: 1000
        group: 1000

    - name: 'Precheck if encrypted file system exists so we dont try to bootstrap'
      stat:
        path: /cryptfs_file_sparse.img
        get_checksum: False
        get_md5: False
      register: encryptedFileSystemPreCheck

    - name: 'Bootstrap encrypted data folder'
      script: ../cryptfs/bootstrap.sh -s {{encrypted_disk_size}} -p {{disk_encryption_key}}
      when: (not encryptedFileSystemPreCheck.stat.exists)

    - name: Wait for encrypted file system
      ansible.builtin.wait_for:
        path: /cryptfs_file_sparse.img
        state: present

    - name: 'Register encrypted file system'
      stat:
        path: /cryptfs_file_sparse.img
        get_checksum: False
        get_md5: False
      register: encryptedFileSystemPostCheck

    - name: 'Mount encrypted data folder'
      script: ../cryptfs/mount.sh -p {{disk_encryption_key}}
      when: encryptedFileSystemPostCheck.stat.exists

    # https://stackoverflow.com/a/24765946
    - name: Create swap file
      command:
        dd if=/dev/zero of={{ swap_file_path }} bs=1024 count={{ swap_file_size_mb }}k
        creates="{{ swap_file_path }}"
      tags:
        - swap.file.create

    - name: Change swap file permissions
      file: path="{{ swap_file_path }}"
        owner=root
        group=root
        mode=0600
      tags:
        - swap.file.permissions

    - name: 'Check swap file type'
      command: file {{ swap_file_path }}
      register: swapfile
      tags:
        - swap.file.mkswap

    - name: Make swap file
      command: 'sudo mkswap {{ swap_file_path }}'
      when: swapfile.stdout.find('swap file') == -1
      tags:
        - swap.file.mkswap

    - name: Write swap entry in fstab
      mount: name=none
        src={{ swap_file_path }}
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      tags:
        - swap.fstab

    - name: Mount swap
      command: 'swapon {{ swap_file_path }}'
      when: ansible_swaptotal_mb < 1
      tags:
        - swap.file.swapon

    - name: Check mongo data directory
      stat:
        path: /data/mongo
      register: mongo_data

    - name: 'Create mongo data directory'
      file:
        path: /data/mongo
        state: directory
      when: not mongo_data.stat.exists

    - name: Check mongo data backup directory
      stat:
        path: /data/backups/mongo
      register: mongo_data_backup

    - name: 'Create mongo backup directory'
      file:
        path: /data/backups/mongo
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx
      when: not mongo_data_backup.stat.exists

    - name: 'Create traefik data directory'
      file:
        path: /data/traefik
        state: directory

    - name: Check elasticsearch data directory
      stat:
        path: /data/elasticsearch
      register: elasticsearch_data

    - name: 'Create elasticsearch data directory'
      file:
        path: /data/elasticsearch
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx
      when: not elasticsearch_data.stat.exists

    - name: Check elasticsearch data backup directory
      stat:
        path: /data/backups/elasticsearch
      register: elasticsearch_data_backup

    - name: 'Create elasticsearch backup directory'
      file:
        path: /data/backups/elasticsearch
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not elasticsearch_data_backup.stat.exists

    - name: Check metabase data directory
      stat:
        path: /data/metabase
      register: metabase_data

    - name: 'Create metabase data directory'
      file:
        path: /data/metabase
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx
      when: not metabase_data.stat.exists

    - name: Check metabase data backup directory
      stat:
        path: /data/backups/metabase
      register: metabase_data_backup

    - name: 'Create metabase backup directory'
      file:
        path: /data/backups/metabase
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not metabase_data_backup.stat.exists

    - name: Check influxdb data directory
      stat:
        path: /data/influxdb
      register: influxdb_data

    - name: 'Create influxdb data directory'
      file:
        path: /data/influxdb
        state: directory
      when: not influxdb_data.stat.exists

    - name: Check influxdb data backup directory
      stat:
        path: /data/backups/influxdb
      register: influxdb_data_backup

    - name: 'Create influxdb backup directory'
      file:
        path: /data/backups/influxdb
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx
      when: not influxdb_data_backup.stat.exists

    - name: Check minio data directory
      stat:
        path: /data/minio
      register: minio_data

    - name: 'Create minio data directory'
      file:
        path: /data/minio
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not minio_data.stat.exists

    - name: Check minio data backup directory
      stat:
        path: /data/backups/minio
      register: minio_data_backup

    - name: 'Create minio backup directory'
      file:
        path: /data/backups/minio
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not minio_data_backup.stat.exists

    - name: Check vsexport data directory
      stat:
        path: /data/vsexport
      register: vsexport_data

    - name: 'Create vsexport data directory'
      file:
        path: /data/vsexport
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not vsexport_data.stat.exists

    - name: Check vsexport data backup directory
      stat:
        path: /data/backups/vsexport
      register: vsexport_data_backup

    - name: 'Create vsexport backup directory'
      file:
        path: /data/backups/vsexport
        state: directory
        group: 1000
        owner: 1000
        mode: ugo+rwx
      when: not vsexport_data_backup.stat.exists

    - name: 'Install UFW'
      apt:
        name: ufw
        state: present

    - name: 'Allow OpenSSH through UFW'
      ufw:
        rule: allow
        name: OpenSSH

    - name: 'Install Fail2Ban'
      apt:
        name: fail2ban
        state: present

    - name: 'Copy fail2ban jail.local'
      copy:
        src: ../jail.local
        dest: /etc/fail2ban/

    - name: 'Start fail2ban and reload jail.local'
      service:
        name: fail2ban
        state: restarted

    - name: 'Copy logrotate script'
      copy:
        src: ../logrotate.conf
        dest: /etc/

    - name: 'Save system logs to Papertrail'
      register: papaertrailSystemLogs
      shell: ' cd / && wget -qO - --header="X-Papertrail-Token: {{ papertrail_token }}" \ https://papertrailapp.com/destinations/16712142/setup.sh | sudo bash >> /var/log/papertrail.log 2>&1'
      when: papertrail_token is defined
    # Docker swarm ports - Note: all published docker container port will override UFW rules!
    - name: 'Allow secure docker client communication'
      ufw:
        rule: allow
        port: 2376
        proto: tcp
    - name: 'Allow docker swarm communication among nodes - TCP'
      ufw:
        rule: allow
        port: 7946
        proto: tcp
    - name: 'Allow docker swarm communication among nodes - UDP'
      ufw:
        rule: allow
        port: 7946
        proto: udp
    - name: 'Allow docker overlay network traffic'
      ufw:
        rule: allow
        port: 4789
        proto: udp

    - name: 'Deny everything else and enable UFW'
      ufw:
        state: enabled
        default: deny
        direction: incoming

    - name: 'Create secrets directory'
      file:
        path: /data/secrets
        state: directory
        group: 1000
        owner: 1000
        mode: g+rwx

    - name: Save secrets into encrypted folder for access by scripts
      ansible.builtin.copy:
        dest: /data/secrets/opencrvs.secrets
        group: 1000
        owner: 1000
        mode: g+rwx
        content: |
          MONGODB_ADMIN_PASSWORD={{ mongodb_admin_password }}
          MONGODB_ADMIN_USER={{ mongodb_admin_username }}
          ELASTICSEARCH_ADMIN_PASSWORD={{elasticsearch_superuser_password}}
          ELASTICSEARCH_ADMIN_USER=elastic

    - name: Save disk encryption key into a file as an example (in production use a hardware security module)
      ansible.builtin.copy:
        dest: /root/disk-encryption-key.txt
        group: 1000
        owner: 1000
        mode: g+rwx
        content: |
          DISK_ENCRYPTION_KEY={{ disk_encryption_key }}

    - name: Copy reboot.service systemd file. Must decrypt disk on reboot
      ansible.builtin.copy:
        dest: /etc/systemd/system/reboot.service
        group: 1000
        owner: 1000
        mode: g+rwx
        content: |
          [Unit]
          Description=Mount encrypted dir

          [Service]
          ExecStart=bash /opt/opencrvs/infrastructure/cryptfs/decrypt.sh -key /root/disk-encryption-key.txt >> /var/log/cryptfs-reboot.log 2>&1

          [Install]
          WantedBy=multi-user.target
      when: encryptedFileSystemPostCheck.stat.exists

    - name: 'Setup systemd to mount encrypted folder'
      shell: systemctl daemon-reload && systemctl enable reboot.service
      when: encryptedFileSystemPostCheck.stat.exists

- hosts: docker-manager-first
  become: yes
  become_method: sudo
  tasks:
    - name: 'Allow secure docker swarm node communication (managers only)'
      ufw:
        rule: allow
        port: 2377
        proto: tcp

    - name: 'Create primary swarm manager'
      shell: docker swarm init --advertise-addr {{ ansible_default_ipv4.address }}
      when: "docker_info.stdout.find('Swarm: inactive') != -1"

    - name: 'Get docker swarm manager token'
      shell: docker swarm join-token -q manager
      register: manager_token

    - name: 'Get docker swarm worker token'
      shell: docker swarm join-token -q worker
      register: worker_token

    - name: 'Set higher max map count for elastic search'
      sysctl:
        name: vm.max_map_count
        value: 262144
        state: present

    - name: 'Create acme file for traefik'
      file:
        path: /data/traefik/acme.json
        state: touch
        mode: '600'

- hosts: docker-manager-first
  become: yes
  become_method: sudo
  tasks:
    - name: 'Label node as data1'
      shell: docker node update --label-add data1=true {{ data1_hostname }}
